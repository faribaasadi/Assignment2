Excersie2
Fariba Asadi
2/11/2020


int is a primitive data type
Primitive data type Int Considered simple data types that hold a single value.

Integer is a Non primitive data type They don't store the value, but store a reference to that value

 Integer is a class in Java.lang.Number package
•Wrapper class for integer values
• Includes methods and functionality that do not come with int variables
Differences: 
Primitive data types: 

Type- int is a data type that stores 32-bit signed two's compliment integer and faster to work with but do not have special capabilities.

Purpose- int helps in storing integer value into memory.

Flexibility- int provides less flexibility as compare to Integer as it only allows binary value of an integer in it.

Memory Allocation- int is a primitive data type and takes 32 bits (4 bytes) to store.

Casting- In java one can’t assign a string value (containing an integer only) to an int variable directly or even by casting.

Direct Conversion to Other base- In case of int we can't convert its integer value to another base.

Allowed operations- int do not allowed any of inbuilt functions to change its value or syntax.

Non-primitive: 
Type- Integer is a wrapper class which wraps a primitive type int into an object and can take up more resources.
Purpose- Integer helps in converting int into object and to convert an object into int as per requirement.
Flexibility- Integer on other hand is more flexible in storing and manipulating an int data.Since Wrapper classes inherit Object class, they can be used in collections with Object reference or generics.
Memory allocation- Integer is an object which takes 128 bits (16 bytes) to store its int value.
Casting- In case of Integer we can assign string to an object of Integer type using the Integer (String) constructor or by even use parseInt(String) to convert a String literal to an int value. 
Direct Conversion to Other base- However in Integer we can directly convert its integer value to other bases such as Binary, Octal or Hexadecimal format using toBinaryString(), toOctalString() or toHexString() respectively

Allowed operations- However in Integer we can reverse number or rotate it left or right using reverse (), rotateLeft() and rotateRight() respectively.






